REST - Representational State Transfer
    Projetadas para recursos
        Se tratam qualquer tipo de objeto, dados ou serviço que meu cliente possa acessar
    
    Iremos pensar sempre em substantivo e não verbo
                      POST   →   https://localhost:3001/saveproduct
 FORMA INCORRETA →    PUT    →   https://localhost:3001/editproduct
                      GET    →   https://localhost:3001/getproduct/3
                      DELETE →   https://localhost:3001/deletetproduct/3

                      POST   →   https://localhost:3001/product
 FORMA CORRETA   →    PUT    →   https://localhost:3001/product/{ID}
                      GET    →   https://localhost:3001/product/
                      DELETE →   https://localhost:3001/product/{ID}



    Independencia de plataforma → qualquer cliente é capaz de chamar a API, independentemente de 
                                como a API está implementada internamente.

    Evolução do serviço → A API deve ser capaz de evoluir e adcionar funcionalidades independentemente 
                         dos aplicativos do cliente. 

    STATUS CODE - Resposta HTTP
        200 - 599

MODO DEBUG NO VS CODE - 
    F5 para configurar e criar a pasta .vscode;
    F5 para rodar o DEBUG;
    Pode adcionar um breakpoint;
    F11 entro dentro dos métodos que estou chamando;
    F10 para avançar linha a linha;
    F5 para sair do breakpoint;

CONFIGURAÇÃO - appsettings.json
    Toda aplicação precisa de uma configuração 
        Qual banco de dados vai usar, string de conexão;
            Não guardar esses dados dentro do código (HARDCODE)
    IConfiguration

AMBIENTES DE DESENVOLVIMENTO - launchSettings.json  
    Profiles → "ASPNETCORE_ENVIRONMENT": "Development" ← posso alterar de acordo com o nome que 
    ,                                                    dei para meu ambiente em appsettings
    É importante pois posso configurar meu Endpoint para rodar apenas em um ambiente específico;
        if(app.Environment.IsStaging())

DOCKER
    Instalar WSL;
        Executar CMD no modo administrador;
        digitar wsl --install


REPOSITÓRIO - GitHub

    …or create a new repository on the command line
        echo "# teste" >> README.md
        git init
        git add README.md
        git commit -m "first commit"
        git branch -M main
        git remote add origin "LINK"
        git push -u origin main
    
    …or push an existing repository from the command line
        git remote add origin "LINK"
        git branch -M main
        git push -u origin main


Entity Framework Core
    Configurar
       Criar uma classe de configuração 
            public class ApplicationDbContext : DbContext 
            {
                public DbSet<Product> Products { get; set; }

                protected override void OnConfiguring(DbContextOptionsBuilder options)
                {
                    options.UseSqlServer("Server=localhost;Database=Products; User Id=sa;Password=631018@Pra;MultipleActiveResultSets=true;Encrypt=YES;TrustServerCertificate=YES");
                }
            }
        no powershell → dotnet tool install --global dotnet-ef
    
    Migration
        criar migration
            arquivo C# que adicona realiza as modificacoes no meu banco de dados;                                       
            no powershell → dotnet ef migrations add CreateProduct ← nome da minha migration;
        Atualizar Migration
            no powershell → dotnet ef database update

        Voltar para uma versao anterior → CUIDADO, PERDE OS DADOS QUE JÁ ESTIVEREM SALVO NELA
         no powershell → dotnet ef database update → 20220118183315_CreateProduct ← nome da minha migration;

    Atualizar
        no powershell → dotnet tool install --global dotnet-outdated-tool
        no powershell → dotnet outdated --updated 




